{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "V100"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "import torch.nn.functional as F\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from torch.optim.lr_scheduler import LambdaLR\n"
      ],
      "metadata": {
        "id": "uqWFIpdbu3WG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the device for computation\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "  print('Not connected to a GPU')\n",
        "else:\n",
        "  print(gpu_info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iC08UxeXwOkK",
        "outputId": "987303d7-1425-4474-a64e-dc68d31dbecb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mon Jul 17 22:21:02 2023       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 525.105.17   Driver Version: 525.105.17   CUDA Version: 12.0     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla V100-SXM2...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   33C    P0    23W / 300W |      2MiB / 16384MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class MLP(nn.Module):\n",
        "    def __init__(self, input_dim, hidden_dim, output_dim):\n",
        "        super(MLP, self).__init__()\n",
        "        self.fc1 = nn.Linear(input_dim, hidden_dim)\n",
        "        self.fc2 = nn.Linear(hidden_dim, output_dim)\n",
        "# # Xavier initialization\n",
        "#         torch.nn.init.xavier_uniform_(self.fc1.weight)\n",
        "#         torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "# Normal distribution initialization\n",
        "        torch.nn.init.normal_(self.fc1.weight)\n",
        "        torch.nn.init.normal_(self.fc2.weight)\n",
        "    def forward(self, x):\n",
        "        x = self.fc1(x)\n",
        "        x = F.relu(x)\n",
        "        x = self.fc2(x)\n",
        "        return x"
      ],
      "metadata": {
        "id": "x3ZVmimAu_8g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tU-NnYC5uB3M"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "def to_one_hot(i, n):\n",
        "    \"\"\"Convert an integer to one-hot vector\"\"\"\n",
        "    a = torch.zeros(n)\n",
        "    a[i] = 1\n",
        "    return a\n",
        "\n",
        "def from_one_hot(a):\n",
        "    \"\"\"Convert a one-hot vector to an integer\"\"\"\n",
        "    return torch.argmax(a).item()\n",
        "\n",
        "def generate_dataset_one_hot(p, alpha, seed=41):\n",
        "    \"\"\"Generate a dataset with one-hot encoded inputs and outputs\"\"\"\n",
        "    eye = torch.eye(p)\n",
        "    dataset = []\n",
        "    for a in range(p):\n",
        "        for b in range(p):\n",
        "            c = (a + b) % p\n",
        "            ab_encoded = torch.cat((eye[a], eye[b]))\n",
        "            c_encoded = to_one_hot(c, p)\n",
        "            dataset.append((ab_encoded, c_encoded))\n",
        "    dataset = [(ab.clone().detach(), c.clone().detach()) for ab, c in dataset]\n",
        "    np.random.seed(seed) #Ensures reproducibility, can be changed by changing seed=42\n",
        "    np.random.shuffle(dataset)\n",
        "    train_set, test_set = train_test_split(dataset, train_size=alpha, shuffle=False)\n",
        "    train_input, train_output = zip(*train_set)\n",
        "    test_input, test_output = zip(*test_set)\n",
        "    return list(train_input), list(train_output), list(test_input), list(test_output)\n",
        "\n",
        "def decode_dataset(train_input, train_output, test_input, test_output):\n",
        "    \"\"\"Decode the dataset from one-hot encoded vectors to integers\"\"\"\n",
        "    train_input_decoded = [(from_one_hot(a[:p]), from_one_hot(a[p:])) for a in train_input]\n",
        "    train_output_decoded = [from_one_hot(c) for c in train_output]\n",
        "    test_input_decoded = [(from_one_hot(a[:p]), from_one_hot(a[p:])) for a in test_input]\n",
        "    test_output_decoded = [from_one_hot(c) for c in test_output]\n",
        "    return train_input_decoded, train_output_decoded, test_input_decoded, test_output_decoded\n",
        "\n",
        "# p = 97  # @param\n",
        "# alpha = 0.6 #@param\n",
        "\n",
        "# # Generate the dataset with one-hot encoded outputs\n",
        "# train_input, train_output, test_input, test_output = generate_dataset_one_hot(p, alpha)\n",
        "\n",
        "# # Decode the dataset\n",
        "# train_input_decoded, train_output_decoded, test_input_decoded, test_output_decoded = decode_dataset(\n",
        "#     train_input, train_output, test_input, test_output\n",
        "# )\n",
        "\n",
        "# # Return the first few examples from the decoded dataset for verification\n",
        "# # print(train_input[:2])\n",
        "# # print(train_input_decoded[:5], train_output_decoded[:5])\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train_network(model, train_input, train_output, test_input, test_output, n_epochs, learning_rate):\n",
        "   # Convert lists to tensors and move to device\n",
        "    train_input = torch.stack(train_input).to(device)\n",
        "    train_output = torch.stack(train_output).to(device)\n",
        "    test_input = torch.stack(test_input).to(device)\n",
        "    test_output = torch.stack(test_output).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss() #@param [\"nn.CrossEntropyLoss()\", \"nn.MSELoss()\"] {type:\"raw\"}\n",
        "    #criterion = nn.MSELoss()    (Now Working)\n",
        "\n",
        "\n",
        "    # Define the optimizer as AdamW\n",
        "    optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate, betas=(0.9, 0.98), weight_decay=wd)\n",
        "    #optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0 ,weight_decay=0)\n",
        "    #optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n",
        "    #in this case, optimization with SGD (w and wo momentum) doesn't work unless I set the lt to be very high, unclear why.\n",
        "\n",
        "    #Scheduler with warmup steps\n",
        "    # def lr_lambda(epoch):\n",
        "    #     if epoch < 2000:\n",
        "    #         return 1.0\n",
        "    #     else:\n",
        "    #         return 10.0\n",
        "    # scheduler = LambdaLR(optimizer, lr_lambda)\n",
        "\n",
        "    #step Function Scheduler\n",
        "    scheduler = LambdaLR(optimizer, lambda step: min(step/100, 1))\n",
        "\n",
        "    train_losses = []\n",
        "    test_losses = []\n",
        "    train_accuracies = []\n",
        "    test_accuracies = []\n",
        "\n",
        "    for epoch in range(n_epochs):\n",
        "        model.train()\n",
        "        optimizer.zero_grad()\n",
        "        outputs_train = model(train_input)\n",
        "        loss_train = criterion(outputs_train, train_output)\n",
        "        loss_train.backward()\n",
        "        optimizer.step()\n",
        "        scheduler.step()\n",
        "\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            outputs_test = model(test_input)\n",
        "            loss_test = criterion(outputs_test, test_output)\n",
        "\n",
        "        train_losses.append(loss_train.item())\n",
        "        test_losses.append(loss_test.item())\n",
        "\n",
        "        predicted_train = torch.argmax(outputs_train.data, dim=1)\n",
        "        predicted_test = torch.argmax(outputs_test.data, dim=1)\n",
        "        train_output_indices = torch.argmax(train_output, dim=1)\n",
        "        test_output_indices = torch.argmax(test_output, dim=1)\n",
        "        train_correct = (predicted_train == train_output_indices).sum().item()\n",
        "        test_correct = (predicted_test == test_output_indices).sum().item()\n",
        "        train_acc = train_correct / len(train_output)\n",
        "        test_acc = test_correct / len(test_output)\n",
        "        train_accuracies.append(train_acc)\n",
        "        test_accuracies.append(test_acc)\n",
        "        if (epoch + 1) % 100 == 0:\n",
        "            print(f'Epoch [{epoch+1}/{n_epochs}], Train Loss: {loss_train.item():.8f}, Test Loss: {loss_test.item():.8f}, Train Acc: {train_acc*100:.2f}%, Test Acc: {test_acc*100:.2f}%')\n",
        "\n",
        "    return train_losses, test_losses, train_accuracies, test_accuracies"
      ],
      "metadata": {
        "id": "SB1aN8xZwD9v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p = 97  #@param\n",
        "alpha = 0.6 #@param\n",
        "train_input, train_output, test_input, test_output = generate_dataset_one_hot(p, alpha)\n",
        "\n",
        "input_dim = 2 * p\n",
        "hidden_dim = 128 #@param\n",
        "output_dim = p\n",
        "model = MLP(input_dim, hidden_dim, output_dim).to(device)  # Move the model to the device\n",
        "print(len(train_output))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cjqWbO3u0vQ",
        "outputId": "2be317dd-3447-4c88-c1f4-af5e4ad13b7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5645\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n_epochs = 20000 #@param\n",
        "learning_rate = 0.001 #@param\n",
        "wd= 0.01 #@param    (For very small wd=0.01 , Lr=0.01, we notice slingshots)\n",
        "train_losses, test_losses, train_accuracies, test_accuracies = train_network(model, train_input, train_output, test_input, test_output, n_epochs, learning_rate)\n",
        "\n",
        "plt.figure(figsize=(4, 4))\n",
        "plt.plot(range(1, len(train_losses)+1), train_losses, label='Train Loss')\n",
        "plt.plot(range(1, len(test_losses)+1), test_losses, label='Test Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.grid(True)\n",
        "plt.yscale('log')  # Make y-axis logarithmic\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(range(1, len(train_accuracies)+1), train_accuracies, label='Train Accuracy')\n",
        "plt.plot(range(1, len(test_accuracies)+1), test_accuracies, label='Test Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SCKNkEuMwGJS",
        "outputId": "dee9f3be-aa22-4523-89b7-64b86ac52f37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [100/20000], Train Loss: 8.36907959, Test Loss: 12.16111946, Train Acc: 3.93%, Test Acc: 0.64%\n",
            "Epoch [200/20000], Train Loss: 2.87238526, Test Loss: 9.26536465, Train Acc: 32.33%, Test Acc: 0.21%\n",
            "Epoch [300/20000], Train Loss: 1.12990749, Test Loss: 12.23128891, Train Acc: 80.23%, Test Acc: 0.19%\n",
            "Epoch [400/20000], Train Loss: 0.11625113, Test Loss: 17.90126801, Train Acc: 99.98%, Test Acc: 0.56%\n",
            "Epoch [500/20000], Train Loss: 0.01651235, Test Loss: 21.06254387, Train Acc: 100.00%, Test Acc: 0.85%\n",
            "Epoch [600/20000], Train Loss: 0.00405882, Test Loss: 22.80685997, Train Acc: 100.00%, Test Acc: 0.96%\n",
            "Epoch [700/20000], Train Loss: 0.00117048, Test Loss: 24.09177208, Train Acc: 100.00%, Test Acc: 0.96%\n",
            "Epoch [800/20000], Train Loss: 0.00036402, Test Loss: 25.17289543, Train Acc: 100.00%, Test Acc: 1.43%\n",
            "Epoch [900/20000], Train Loss: 0.00011644, Test Loss: 26.11267281, Train Acc: 100.00%, Test Acc: 1.62%\n",
            "Epoch [1000/20000], Train Loss: 0.00003852, Test Loss: 26.95228195, Train Acc: 100.00%, Test Acc: 1.97%\n",
            "Epoch [1100/20000], Train Loss: 0.00001318, Test Loss: 27.69677544, Train Acc: 100.00%, Test Acc: 2.07%\n",
            "Epoch [1200/20000], Train Loss: 0.00000481, Test Loss: 28.30395508, Train Acc: 100.00%, Test Acc: 2.36%\n",
            "Epoch [1300/20000], Train Loss: 0.00000196, Test Loss: 28.75705528, Train Acc: 100.00%, Test Acc: 2.47%\n",
            "Epoch [1400/20000], Train Loss: 0.00000093, Test Loss: 29.04470825, Train Acc: 100.00%, Test Acc: 2.84%\n",
            "Epoch [1500/20000], Train Loss: 0.00000053, Test Loss: 29.11945534, Train Acc: 100.00%, Test Acc: 2.92%\n",
            "Epoch [1600/20000], Train Loss: 0.00000037, Test Loss: 28.98488998, Train Acc: 100.00%, Test Acc: 2.98%\n",
            "Epoch [1700/20000], Train Loss: 0.00000030, Test Loss: 28.72325325, Train Acc: 100.00%, Test Acc: 3.03%\n",
            "Epoch [1800/20000], Train Loss: 0.00000027, Test Loss: 28.40954399, Train Acc: 100.00%, Test Acc: 3.06%\n",
            "Epoch [1900/20000], Train Loss: 0.00000025, Test Loss: 28.08149529, Train Acc: 100.00%, Test Acc: 3.08%\n",
            "Epoch [2000/20000], Train Loss: 0.00000024, Test Loss: 27.75332832, Train Acc: 100.00%, Test Acc: 3.13%\n",
            "Epoch [2100/20000], Train Loss: 0.00000023, Test Loss: 27.42823792, Train Acc: 100.00%, Test Acc: 3.16%\n",
            "Epoch [2200/20000], Train Loss: 0.00000022, Test Loss: 27.11037636, Train Acc: 100.00%, Test Acc: 3.35%\n",
            "Epoch [2300/20000], Train Loss: 0.00000022, Test Loss: 26.79932976, Train Acc: 100.00%, Test Acc: 3.40%\n",
            "Epoch [2400/20000], Train Loss: 0.00000021, Test Loss: 26.49245453, Train Acc: 100.00%, Test Acc: 3.45%\n",
            "Epoch [2500/20000], Train Loss: 0.00000021, Test Loss: 26.19196129, Train Acc: 100.00%, Test Acc: 3.53%\n",
            "Epoch [2600/20000], Train Loss: 0.00000021, Test Loss: 25.89602470, Train Acc: 100.00%, Test Acc: 3.59%\n",
            "Epoch [2700/20000], Train Loss: 0.00000021, Test Loss: 25.60172081, Train Acc: 100.00%, Test Acc: 3.75%\n",
            "Epoch [2800/20000], Train Loss: 0.00000020, Test Loss: 25.30992508, Train Acc: 100.00%, Test Acc: 3.91%\n",
            "Epoch [2900/20000], Train Loss: 0.00000020, Test Loss: 25.02483559, Train Acc: 100.00%, Test Acc: 3.96%\n",
            "Epoch [3000/20000], Train Loss: 0.00000020, Test Loss: 24.74537277, Train Acc: 100.00%, Test Acc: 4.06%\n",
            "Epoch [3100/20000], Train Loss: 0.00000020, Test Loss: 24.47037506, Train Acc: 100.00%, Test Acc: 4.14%\n",
            "Epoch [3200/20000], Train Loss: 0.00000020, Test Loss: 24.19906044, Train Acc: 100.00%, Test Acc: 4.28%\n",
            "Epoch [3300/20000], Train Loss: 0.00000020, Test Loss: 23.93258858, Train Acc: 100.00%, Test Acc: 4.44%\n",
            "Epoch [3400/20000], Train Loss: 0.00000019, Test Loss: 23.66981697, Train Acc: 100.00%, Test Acc: 4.49%\n",
            "Epoch [3500/20000], Train Loss: 0.00000019, Test Loss: 23.41008568, Train Acc: 100.00%, Test Acc: 4.52%\n",
            "Epoch [3600/20000], Train Loss: 0.00000019, Test Loss: 23.15484238, Train Acc: 100.00%, Test Acc: 4.65%\n",
            "Epoch [3700/20000], Train Loss: 0.00000019, Test Loss: 22.90244293, Train Acc: 100.00%, Test Acc: 4.68%\n",
            "Epoch [3800/20000], Train Loss: 0.00000019, Test Loss: 22.65593147, Train Acc: 100.00%, Test Acc: 4.68%\n",
            "Epoch [3900/20000], Train Loss: 0.00000019, Test Loss: 22.41514969, Train Acc: 100.00%, Test Acc: 4.94%\n",
            "Epoch [4000/20000], Train Loss: 0.00000019, Test Loss: 22.17890358, Train Acc: 100.00%, Test Acc: 5.05%\n",
            "Epoch [4100/20000], Train Loss: 0.00000019, Test Loss: 21.94758224, Train Acc: 100.00%, Test Acc: 5.05%\n",
            "Epoch [4200/20000], Train Loss: 0.00000019, Test Loss: 21.72028542, Train Acc: 100.00%, Test Acc: 5.15%\n",
            "Epoch [4300/20000], Train Loss: 0.00000019, Test Loss: 21.49692726, Train Acc: 100.00%, Test Acc: 5.26%\n",
            "Epoch [4400/20000], Train Loss: 0.00000019, Test Loss: 21.27765846, Train Acc: 100.00%, Test Acc: 5.53%\n",
            "Epoch [4500/20000], Train Loss: 0.00000018, Test Loss: 21.06095886, Train Acc: 100.00%, Test Acc: 5.61%\n",
            "Epoch [4600/20000], Train Loss: 0.00000018, Test Loss: 20.84749031, Train Acc: 100.00%, Test Acc: 5.79%\n",
            "Epoch [4700/20000], Train Loss: 0.00000018, Test Loss: 20.63905907, Train Acc: 100.00%, Test Acc: 5.95%\n",
            "Epoch [4800/20000], Train Loss: 0.00000018, Test Loss: 20.43264771, Train Acc: 100.00%, Test Acc: 6.03%\n",
            "Epoch [4900/20000], Train Loss: 0.00000018, Test Loss: 20.22727966, Train Acc: 100.00%, Test Acc: 6.11%\n",
            "Epoch [5000/20000], Train Loss: 0.00000018, Test Loss: 20.02430725, Train Acc: 100.00%, Test Acc: 6.14%\n",
            "Epoch [5100/20000], Train Loss: 0.00000018, Test Loss: 19.82262039, Train Acc: 100.00%, Test Acc: 6.35%\n",
            "Epoch [5200/20000], Train Loss: 0.00000017, Test Loss: 19.62301064, Train Acc: 100.00%, Test Acc: 6.40%\n",
            "Epoch [5300/20000], Train Loss: 0.00000017, Test Loss: 19.42812729, Train Acc: 100.00%, Test Acc: 6.48%\n",
            "Epoch [5400/20000], Train Loss: 0.00000017, Test Loss: 19.23372269, Train Acc: 100.00%, Test Acc: 6.72%\n",
            "Epoch [5500/20000], Train Loss: 0.00000017, Test Loss: 19.04193115, Train Acc: 100.00%, Test Acc: 6.88%\n",
            "Epoch [5600/20000], Train Loss: 0.00000017, Test Loss: 18.85394669, Train Acc: 100.00%, Test Acc: 6.96%\n",
            "Epoch [5700/20000], Train Loss: 0.00000017, Test Loss: 18.66857529, Train Acc: 100.00%, Test Acc: 7.23%\n",
            "Epoch [5800/20000], Train Loss: 0.00000017, Test Loss: 18.48653412, Train Acc: 100.00%, Test Acc: 7.25%\n",
            "Epoch [5900/20000], Train Loss: 0.00000017, Test Loss: 18.30378723, Train Acc: 100.00%, Test Acc: 7.49%\n",
            "Epoch [6000/20000], Train Loss: 0.00000017, Test Loss: 18.12047386, Train Acc: 100.00%, Test Acc: 7.70%\n",
            "Epoch [6100/20000], Train Loss: 0.00000017, Test Loss: 17.93788719, Train Acc: 100.00%, Test Acc: 7.89%\n",
            "Epoch [6200/20000], Train Loss: 0.00000017, Test Loss: 17.75745583, Train Acc: 100.00%, Test Acc: 8.02%\n",
            "Epoch [6300/20000], Train Loss: 0.00000017, Test Loss: 17.58179474, Train Acc: 100.00%, Test Acc: 8.18%\n",
            "Epoch [6400/20000], Train Loss: 0.00000017, Test Loss: 17.41015816, Train Acc: 100.00%, Test Acc: 8.29%\n",
            "Epoch [6500/20000], Train Loss: 0.00000017, Test Loss: 17.23606491, Train Acc: 100.00%, Test Acc: 8.40%\n",
            "Epoch [6600/20000], Train Loss: 0.00000017, Test Loss: 17.06072617, Train Acc: 100.00%, Test Acc: 8.61%\n",
            "Epoch [6700/20000], Train Loss: 0.00000017, Test Loss: 16.89045906, Train Acc: 100.00%, Test Acc: 8.77%\n",
            "Epoch [6800/20000], Train Loss: 0.00000017, Test Loss: 16.72045708, Train Acc: 100.00%, Test Acc: 8.77%\n",
            "Epoch [6900/20000], Train Loss: 0.00000017, Test Loss: 16.55348587, Train Acc: 100.00%, Test Acc: 8.98%\n",
            "Epoch [7000/20000], Train Loss: 0.00000017, Test Loss: 16.39122009, Train Acc: 100.00%, Test Acc: 9.01%\n",
            "Epoch [7100/20000], Train Loss: 0.00000017, Test Loss: 16.23338127, Train Acc: 100.00%, Test Acc: 9.22%\n",
            "Epoch [7200/20000], Train Loss: 0.00000016, Test Loss: 16.07714462, Train Acc: 100.00%, Test Acc: 9.48%\n",
            "Epoch [7300/20000], Train Loss: 0.00000017, Test Loss: 15.91945553, Train Acc: 100.00%, Test Acc: 9.88%\n",
            "Epoch [7400/20000], Train Loss: 0.00000017, Test Loss: 15.76132774, Train Acc: 100.00%, Test Acc: 10.04%\n",
            "Epoch [7500/20000], Train Loss: 0.00000017, Test Loss: 15.60061836, Train Acc: 100.00%, Test Acc: 10.26%\n",
            "Epoch [7600/20000], Train Loss: 0.00000017, Test Loss: 15.43737125, Train Acc: 100.00%, Test Acc: 10.57%\n",
            "Epoch [7700/20000], Train Loss: 0.00000017, Test Loss: 15.27393341, Train Acc: 100.00%, Test Acc: 10.65%\n",
            "Epoch [7800/20000], Train Loss: 0.00000017, Test Loss: 15.10738373, Train Acc: 100.00%, Test Acc: 10.81%\n",
            "Epoch [7900/20000], Train Loss: 0.00000017, Test Loss: 14.93901253, Train Acc: 100.00%, Test Acc: 11.24%\n",
            "Epoch [8000/20000], Train Loss: 0.00000016, Test Loss: 14.77408409, Train Acc: 100.00%, Test Acc: 11.80%\n",
            "Epoch [8100/20000], Train Loss: 0.00000016, Test Loss: 14.60866928, Train Acc: 100.00%, Test Acc: 11.90%\n",
            "Epoch [8200/20000], Train Loss: 0.00000016, Test Loss: 14.44217777, Train Acc: 100.00%, Test Acc: 12.11%\n",
            "Epoch [8300/20000], Train Loss: 0.00000016, Test Loss: 14.27767086, Train Acc: 100.00%, Test Acc: 12.14%\n",
            "Epoch [8400/20000], Train Loss: 0.00000016, Test Loss: 14.12004757, Train Acc: 100.00%, Test Acc: 12.65%\n",
            "Epoch [8500/20000], Train Loss: 0.00000016, Test Loss: 13.96373463, Train Acc: 100.00%, Test Acc: 12.89%\n",
            "Epoch [8600/20000], Train Loss: 0.00000016, Test Loss: 13.80906487, Train Acc: 100.00%, Test Acc: 13.42%\n",
            "Epoch [8700/20000], Train Loss: 0.00000016, Test Loss: 13.65885925, Train Acc: 100.00%, Test Acc: 13.82%\n",
            "Epoch [8800/20000], Train Loss: 0.00000016, Test Loss: 13.50467968, Train Acc: 100.00%, Test Acc: 14.24%\n",
            "Epoch [8900/20000], Train Loss: 0.00000016, Test Loss: 13.35123825, Train Acc: 100.00%, Test Acc: 14.74%\n",
            "Epoch [9000/20000], Train Loss: 0.00000016, Test Loss: 13.20103073, Train Acc: 100.00%, Test Acc: 15.30%\n",
            "Epoch [9100/20000], Train Loss: 0.00000017, Test Loss: 13.04860401, Train Acc: 100.00%, Test Acc: 15.67%\n",
            "Epoch [9200/20000], Train Loss: 0.00000017, Test Loss: 12.89919281, Train Acc: 100.00%, Test Acc: 15.91%\n",
            "Epoch [9300/20000], Train Loss: 0.00000017, Test Loss: 12.75473881, Train Acc: 100.00%, Test Acc: 16.45%\n",
            "Epoch [9400/20000], Train Loss: 0.00000016, Test Loss: 12.60426712, Train Acc: 100.00%, Test Acc: 16.68%\n",
            "Epoch [9500/20000], Train Loss: 0.00000016, Test Loss: 12.45649529, Train Acc: 100.00%, Test Acc: 17.11%\n",
            "Epoch [9600/20000], Train Loss: 0.00000016, Test Loss: 12.32560349, Train Acc: 100.00%, Test Acc: 17.51%\n",
            "Epoch [9700/20000], Train Loss: 0.00000017, Test Loss: 12.20455360, Train Acc: 100.00%, Test Acc: 17.91%\n",
            "Epoch [9800/20000], Train Loss: 0.00000017, Test Loss: 12.07927799, Train Acc: 100.00%, Test Acc: 18.30%\n",
            "Epoch [9900/20000], Train Loss: 0.00000017, Test Loss: 11.94933987, Train Acc: 100.00%, Test Acc: 18.86%\n",
            "Epoch [10000/20000], Train Loss: 0.00000017, Test Loss: 11.81636047, Train Acc: 100.00%, Test Acc: 19.47%\n",
            "Epoch [10100/20000], Train Loss: 0.00000017, Test Loss: 11.67968941, Train Acc: 100.00%, Test Acc: 19.90%\n",
            "Epoch [10200/20000], Train Loss: 0.00000017, Test Loss: 11.53946590, Train Acc: 100.00%, Test Acc: 20.30%\n",
            "Epoch [10300/20000], Train Loss: 0.00000017, Test Loss: 11.38985825, Train Acc: 100.00%, Test Acc: 21.01%\n",
            "Epoch [10400/20000], Train Loss: 0.00000017, Test Loss: 11.23896503, Train Acc: 100.00%, Test Acc: 21.57%\n",
            "Epoch [10500/20000], Train Loss: 0.00000017, Test Loss: 11.08513069, Train Acc: 100.00%, Test Acc: 22.10%\n",
            "Epoch [10600/20000], Train Loss: 0.00000017, Test Loss: 10.92674828, Train Acc: 100.00%, Test Acc: 22.66%\n",
            "Epoch [10700/20000], Train Loss: 0.00000017, Test Loss: 10.75696564, Train Acc: 100.00%, Test Acc: 23.30%\n",
            "Epoch [10800/20000], Train Loss: 0.00000017, Test Loss: 10.59504986, Train Acc: 100.00%, Test Acc: 23.75%\n",
            "Epoch [10900/20000], Train Loss: 0.00000016, Test Loss: 10.44829464, Train Acc: 100.00%, Test Acc: 24.07%\n",
            "Epoch [11000/20000], Train Loss: 0.00000016, Test Loss: 10.28481579, Train Acc: 100.00%, Test Acc: 24.79%\n",
            "Epoch [11100/20000], Train Loss: 0.00000017, Test Loss: 10.13141346, Train Acc: 100.00%, Test Acc: 25.29%\n",
            "Epoch [11200/20000], Train Loss: 0.00000017, Test Loss: 9.98989964, Train Acc: 100.00%, Test Acc: 26.01%\n",
            "Epoch [11300/20000], Train Loss: 0.00000017, Test Loss: 9.84319973, Train Acc: 100.00%, Test Acc: 26.81%\n",
            "Epoch [11400/20000], Train Loss: 0.00000017, Test Loss: 9.69106388, Train Acc: 100.00%, Test Acc: 27.28%\n",
            "Epoch [11500/20000], Train Loss: 0.00000017, Test Loss: 9.54460430, Train Acc: 100.00%, Test Acc: 27.55%\n",
            "Epoch [11600/20000], Train Loss: 0.00000016, Test Loss: 9.38685131, Train Acc: 100.00%, Test Acc: 28.27%\n",
            "Epoch [11700/20000], Train Loss: 0.00000016, Test Loss: 9.23069859, Train Acc: 100.00%, Test Acc: 28.67%\n",
            "Epoch [11800/20000], Train Loss: 0.00000016, Test Loss: 9.07443142, Train Acc: 100.00%, Test Acc: 29.22%\n",
            "Epoch [11900/20000], Train Loss: 0.00000016, Test Loss: 8.92110729, Train Acc: 100.00%, Test Acc: 29.65%\n",
            "Epoch [12000/20000], Train Loss: 0.00000016, Test Loss: 8.77468491, Train Acc: 100.00%, Test Acc: 30.26%\n",
            "Epoch [12100/20000], Train Loss: 0.00000016, Test Loss: 8.61878586, Train Acc: 100.00%, Test Acc: 30.87%\n",
            "Epoch [12200/20000], Train Loss: 0.00000016, Test Loss: 8.49490929, Train Acc: 100.00%, Test Acc: 31.27%\n",
            "Epoch [12300/20000], Train Loss: 0.00001181, Test Loss: 8.67322254, Train Acc: 100.00%, Test Acc: 30.71%\n",
            "Epoch [12400/20000], Train Loss: 0.00000449, Test Loss: 8.27755642, Train Acc: 100.00%, Test Acc: 31.80%\n",
            "Epoch [12500/20000], Train Loss: 0.00000233, Test Loss: 7.93531132, Train Acc: 100.00%, Test Acc: 32.23%\n",
            "Epoch [12600/20000], Train Loss: 0.00000136, Test Loss: 7.62063789, Train Acc: 100.00%, Test Acc: 33.05%\n",
            "Epoch [12700/20000], Train Loss: 0.00000092, Test Loss: 7.34245777, Train Acc: 100.00%, Test Acc: 33.77%\n",
            "Epoch [12800/20000], Train Loss: 0.00000073, Test Loss: 7.11653042, Train Acc: 100.00%, Test Acc: 34.06%\n",
            "Epoch [12900/20000], Train Loss: 0.00000064, Test Loss: 6.93891811, Train Acc: 100.00%, Test Acc: 34.25%\n",
            "Epoch [13000/20000], Train Loss: 0.00000055, Test Loss: 6.77821398, Train Acc: 100.00%, Test Acc: 34.59%\n",
            "Epoch [13100/20000], Train Loss: 0.00000047, Test Loss: 6.62104607, Train Acc: 100.00%, Test Acc: 34.91%\n",
            "Epoch [13200/20000], Train Loss: 0.00000038, Test Loss: 6.47429705, Train Acc: 100.00%, Test Acc: 35.55%\n",
            "Epoch [13300/20000], Train Loss: 0.00000031, Test Loss: 6.35939884, Train Acc: 100.00%, Test Acc: 36.00%\n",
            "Epoch [13400/20000], Train Loss: 0.00000026, Test Loss: 6.27700663, Train Acc: 100.00%, Test Acc: 36.50%\n",
            "Epoch [13500/20000], Train Loss: 0.00000023, Test Loss: 6.21790743, Train Acc: 100.00%, Test Acc: 36.88%\n",
            "Epoch [13600/20000], Train Loss: 0.00000020, Test Loss: 6.14907789, Train Acc: 100.00%, Test Acc: 37.11%\n",
            "Epoch [13700/20000], Train Loss: 0.00027577, Test Loss: 7.17905045, Train Acc: 100.00%, Test Acc: 33.87%\n",
            "Epoch [13800/20000], Train Loss: 0.00000852, Test Loss: 6.27163982, Train Acc: 100.00%, Test Acc: 37.27%\n",
            "Epoch [13900/20000], Train Loss: 0.00000379, Test Loss: 5.92952108, Train Acc: 100.00%, Test Acc: 37.73%\n",
            "Epoch [14000/20000], Train Loss: 0.00000199, Test Loss: 5.63703918, Train Acc: 100.00%, Test Acc: 38.82%\n",
            "Epoch [14100/20000], Train Loss: 0.00000125, Test Loss: 5.39836597, Train Acc: 100.00%, Test Acc: 39.69%\n",
            "Epoch [14200/20000], Train Loss: 0.00000098, Test Loss: 5.22484922, Train Acc: 100.00%, Test Acc: 40.22%\n",
            "Epoch [14300/20000], Train Loss: 0.00000090, Test Loss: 5.10811186, Train Acc: 100.00%, Test Acc: 40.65%\n",
            "Epoch [14400/20000], Train Loss: 0.00000083, Test Loss: 5.00497818, Train Acc: 100.00%, Test Acc: 40.91%\n",
            "Epoch [14500/20000], Train Loss: 0.00000073, Test Loss: 4.90094852, Train Acc: 100.00%, Test Acc: 41.21%\n",
            "Epoch [14600/20000], Train Loss: 0.00000062, Test Loss: 4.80234289, Train Acc: 100.00%, Test Acc: 41.37%\n",
            "Epoch [14700/20000], Train Loss: 0.00000049, Test Loss: 4.71156406, Train Acc: 100.00%, Test Acc: 42.45%\n",
            "Epoch [14800/20000], Train Loss: 0.00000036, Test Loss: 4.64268446, Train Acc: 100.00%, Test Acc: 43.15%\n",
            "Epoch [14900/20000], Train Loss: 0.00000028, Test Loss: 4.60642385, Train Acc: 100.00%, Test Acc: 43.81%\n",
            "Epoch [15000/20000], Train Loss: 0.00000024, Test Loss: 4.58352137, Train Acc: 100.00%, Test Acc: 44.10%\n",
            "Epoch [15100/20000], Train Loss: 0.00693214, Test Loss: 6.27580500, Train Acc: 99.88%, Test Acc: 38.23%\n",
            "Epoch [15200/20000], Train Loss: 0.00001224, Test Loss: 4.91456890, Train Acc: 100.00%, Test Acc: 44.37%\n",
            "Epoch [15300/20000], Train Loss: 0.00000519, Test Loss: 4.60635900, Train Acc: 100.00%, Test Acc: 45.70%\n",
            "Epoch [15400/20000], Train Loss: 0.00000267, Test Loss: 4.33964825, Train Acc: 100.00%, Test Acc: 46.97%\n",
            "Epoch [15500/20000], Train Loss: 0.00000159, Test Loss: 4.11019278, Train Acc: 100.00%, Test Acc: 47.93%\n",
            "Epoch [15600/20000], Train Loss: 0.00000115, Test Loss: 3.93213058, Train Acc: 100.00%, Test Acc: 48.49%\n",
            "Epoch [15700/20000], Train Loss: 0.00000101, Test Loss: 3.81623578, Train Acc: 100.00%, Test Acc: 48.91%\n",
            "Epoch [15800/20000], Train Loss: 0.00000094, Test Loss: 3.73365188, Train Acc: 100.00%, Test Acc: 48.91%\n",
            "Epoch [15900/20000], Train Loss: 0.00000085, Test Loss: 3.65769291, Train Acc: 100.00%, Test Acc: 49.10%\n",
            "Epoch [16000/20000], Train Loss: 0.00000073, Test Loss: 3.59083080, Train Acc: 100.00%, Test Acc: 49.57%\n",
            "Epoch [16100/20000], Train Loss: 0.00000058, Test Loss: 3.53157663, Train Acc: 100.00%, Test Acc: 50.27%\n",
            "Epoch [16200/20000], Train Loss: 0.00000043, Test Loss: 3.47742510, Train Acc: 100.00%, Test Acc: 50.93%\n",
            "Epoch [16300/20000], Train Loss: 0.00000031, Test Loss: 3.44782233, Train Acc: 100.00%, Test Acc: 51.30%\n",
            "Epoch [16400/20000], Train Loss: 0.00000025, Test Loss: 3.44741583, Train Acc: 100.00%, Test Acc: 51.43%\n",
            "Epoch [16500/20000], Train Loss: 0.00000021, Test Loss: 3.43042612, Train Acc: 100.00%, Test Acc: 51.62%\n",
            "Epoch [16600/20000], Train Loss: 0.00002632, Test Loss: 4.14566469, Train Acc: 100.00%, Test Acc: 48.59%\n",
            "Epoch [16700/20000], Train Loss: 0.00000635, Test Loss: 3.73612976, Train Acc: 100.00%, Test Acc: 50.72%\n",
            "Epoch [16800/20000], Train Loss: 0.00000301, Test Loss: 3.46660852, Train Acc: 100.00%, Test Acc: 52.36%\n",
            "Epoch [16900/20000], Train Loss: 0.00000161, Test Loss: 3.23216867, Train Acc: 100.00%, Test Acc: 53.77%\n",
            "Epoch [17000/20000], Train Loss: 0.00000104, Test Loss: 3.04609656, Train Acc: 100.00%, Test Acc: 54.84%\n",
            "Epoch [17100/20000], Train Loss: 0.00000088, Test Loss: 2.92644644, Train Acc: 100.00%, Test Acc: 55.55%\n",
            "Epoch [17200/20000], Train Loss: 0.00000087, Test Loss: 2.85690236, Train Acc: 100.00%, Test Acc: 56.11%\n",
            "Epoch [17300/20000], Train Loss: 0.00000083, Test Loss: 2.79745770, Train Acc: 100.00%, Test Acc: 56.59%\n",
            "Epoch [17400/20000], Train Loss: 0.00000075, Test Loss: 2.74304104, Train Acc: 100.00%, Test Acc: 56.83%\n",
            "Epoch [17500/20000], Train Loss: 0.00000062, Test Loss: 2.69571757, Train Acc: 100.00%, Test Acc: 57.31%\n",
            "Epoch [17600/20000], Train Loss: 0.00000047, Test Loss: 2.65536141, Train Acc: 100.00%, Test Acc: 57.81%\n",
            "Epoch [17700/20000], Train Loss: 0.00000034, Test Loss: 2.63068199, Train Acc: 100.00%, Test Acc: 58.61%\n",
            "Epoch [17800/20000], Train Loss: 0.00000026, Test Loss: 2.62835574, Train Acc: 100.00%, Test Acc: 58.69%\n",
            "Epoch [17900/20000], Train Loss: 0.00000026, Test Loss: 2.64037371, Train Acc: 100.00%, Test Acc: 59.14%\n",
            "Epoch [18000/20000], Train Loss: 0.00001794, Test Loss: 3.12349105, Train Acc: 100.00%, Test Acc: 55.47%\n",
            "Epoch [18100/20000], Train Loss: 0.00000587, Test Loss: 2.84224439, Train Acc: 100.00%, Test Acc: 57.36%\n",
            "Epoch [18200/20000], Train Loss: 0.00000280, Test Loss: 2.63299823, Train Acc: 100.00%, Test Acc: 59.01%\n",
            "Epoch [18300/20000], Train Loss: 0.00000156, Test Loss: 2.45659018, Train Acc: 100.00%, Test Acc: 60.65%\n",
            "Epoch [18400/20000], Train Loss: 0.00000105, Test Loss: 2.31693697, Train Acc: 100.00%, Test Acc: 61.69%\n",
            "Epoch [18500/20000], Train Loss: 0.00000093, Test Loss: 2.22577763, Train Acc: 100.00%, Test Acc: 62.73%\n",
            "Epoch [18600/20000], Train Loss: 0.00000094, Test Loss: 2.17427230, Train Acc: 100.00%, Test Acc: 63.02%\n",
            "Epoch [18700/20000], Train Loss: 0.00000091, Test Loss: 2.13410926, Train Acc: 100.00%, Test Acc: 63.12%\n",
            "Epoch [18800/20000], Train Loss: 0.00000082, Test Loss: 2.10103536, Train Acc: 100.00%, Test Acc: 63.47%\n",
            "Epoch [18900/20000], Train Loss: 0.00000067, Test Loss: 2.07538795, Train Acc: 100.00%, Test Acc: 63.63%\n",
            "Epoch [19000/20000], Train Loss: 0.00000049, Test Loss: 2.05288959, Train Acc: 100.00%, Test Acc: 64.08%\n",
            "Epoch [19100/20000], Train Loss: 0.00000035, Test Loss: 2.04115987, Train Acc: 100.00%, Test Acc: 64.67%\n",
            "Epoch [19200/20000], Train Loss: 0.00000026, Test Loss: 2.04829240, Train Acc: 100.00%, Test Acc: 64.98%\n",
            "Epoch [19300/20000], Train Loss: 0.00000022, Test Loss: 2.06026268, Train Acc: 100.00%, Test Acc: 65.30%\n",
            "Epoch [19400/20000], Train Loss: 0.00013197, Test Loss: 3.13397264, Train Acc: 100.00%, Test Acc: 56.27%\n",
            "Epoch [19500/20000], Train Loss: 0.00000842, Test Loss: 2.49877858, Train Acc: 100.00%, Test Acc: 61.74%\n",
            "Epoch [19600/20000], Train Loss: 0.00000371, Test Loss: 2.25712109, Train Acc: 100.00%, Test Acc: 63.68%\n",
            "Epoch [19700/20000], Train Loss: 0.00000188, Test Loss: 2.05007672, Train Acc: 100.00%, Test Acc: 65.33%\n",
            "Epoch [19800/20000], Train Loss: 0.00000113, Test Loss: 1.88081086, Train Acc: 100.00%, Test Acc: 66.87%\n",
            "Epoch [19900/20000], Train Loss: 0.00000085, Test Loss: 1.76601350, Train Acc: 100.00%, Test Acc: 68.12%\n",
            "Epoch [20000/20000], Train Loss: 0.00000082, Test Loss: 1.71250439, Train Acc: 100.00%, Test Acc: 68.62%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#example\n",
        "# model = MLP(input_dim, hidden_dim, output_dim).to(device)\n",
        "test_input_element = test_input[221].to(device)\n",
        "sample_try= model(test_input_element)\n",
        "element_decoded= [(from_one_hot(test_input_element[:p]), from_one_hot(test_input_element[p:]))]\n",
        "print(element_decoded)\n",
        "predicted_try = torch.argmax(sample_try)\n",
        "print(predicted_try)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-l19FvDXyz_M",
        "outputId": "2b6650ba-8fc1-4f65-92a8-1ea99ac3c2f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(68, 17)]\n",
            "tensor(85, device='cuda:0')\n"
          ]
        }
      ]
    }
  ]
}
